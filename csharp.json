{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"class": {
		"prefix": "class",
		"body": ["using System;",
			"",
			"// The Point class is derived from System.Object.",
			"class Point",
			"{",
			"\tpublic int x, y;",
			"",
			"\tpublic Point(int x, int y)",
			"\t{",
			"\t\tthis.x = x;",
			"\t\tthis.y = y;",
			"\t}",
			"",			
			"\tpublic override bool Equals(object obj)",
			"\t{",
			"\t\t// If this and obj do not refer to the same type, then they are not equal.",
			"\t\tif (obj.GetType() != this.GetType()) return false;",
			"",
			"\t\t// Return true if  x and y fields match.",
			"\t\tvar other = (Point) obj;",
			"\t\treturn (this.x == other.x) && (this.y == other.y);",
			"\t}",
			"",
			"\t// Return the XOR of the x and y fields.",
			"\tpublic override int GetHashCode()",
			"\t{",
			"\t\treturn x ^ y;",
			"\t}",
			"",
			"\t// Return the point's value as a string.",
			"\tpublic override String ToString()",
			"\t{",
			"\t\treturn $\"({x}, {y})\";",
			"\t}",
			"",
			"\t// Return a copy of this point object by making a simple field copy.",
			"\tpublic Point Copy()",
			"\t{",
			"\t\treturn (Point) this.MemberwiseClone();",
			"\t}",
			"}",
			"",
			"public sealed class App",
			"{",
			"\tstatic void Main()",
			"\t{",
			"\t\t// Construct a Point object.",
			"\t\tvar p1 = new Point(1,2);",
			"",
			"\t\t// Make another Point object that is a copy of the first.",
			"\t\tvar p2 = p1.Copy();",
			"",
			"\t\t// Make another variable that references the first Point object.",
			"\t\tvar p3 = p1;",
			"",
			"\t\t// The line below displays false because p1 and p2 refer to two different objects.",
			"\t\tConsole.WriteLine(Object.ReferenceEquals(p1, p2));",
			"",
			"\t\t// The line below displays true because p1 and p2 refer to two different objects that have the same value.",
			"\t\tConsole.WriteLine(Object.Equals(p1, p2));",
			"",
			"\t\t// The line below displays true because p1 and p3 refer to one object.",
			"\t\tConsole.WriteLine(Object.ReferenceEquals(p1, p3));",
			"",
			"\t\t// The line below displays: p1's value is: (1, 2)",
			"\t\tConsole.WriteLine($\"p1's value is: {p1.ToString()}\");",
			"\t}",
			"}",
			"",
			"// This code example produces the following output:",
			"//",
			"// False",
			"// True",
			"// True",
			"// p1's value is: (1, 2)"
		]
	}
}