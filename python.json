{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//main function:
	"main()": {
		"prefix": ["main", "main_snippet"],
		"body": [
			"#Main execution function",
			"def main():",
			"\tprint(\"${1:Hello world?}\")",
			"",
			"#Main execution thread",
			"if __name__ == \"__main__\":",
			"\tmain()"
		],
		"description": "The main() function"
	},
	"function()":{
		"prefix": ["function", "function_snippet"],
		"body": [
			"def ${1:function_name}(${2:params}):",
			"\t${3}",
			"#end ${1:function_name}"
		],
		"description": "A function"
	},
	"fileIO_snippet":{
		"prefix": ["file_io", "io", "io_snippet", "file_snippet"],
		"body": [
			"import os",
			"if(os.path.exists(${1:file_path})):",
			"\twith open(${1:file_path}, \"${2:mode}\") as fp:",
			"\t\tcontents = fp.read()",
			"\t\tprint(contents)"
		]
	},
	"dirWalk":{
		"prefix": ["dirWalk, directoryWalk"],
		"body": [
			"import os",
			"for root, dir, files in os.walk(\"${1:dirToWalk}\"):",
			"\tprint root",
			"\tfor items in files:",
			"\t\tprint \"...\" + items",
			"\tprint \"\""
		],
		"description": "Walks directory tree, treating dirToWalk as top of tree."
	},
	"dataClass":{
		"prefix": ["dataClass"],
		"body": [
			"import dataclasses",
			"#from dataclasses import dataclass, field # Alternate import method",
			"@dataclass(frozen=True, order=True)",
			"class ${1:class_name}:",
			"\t${2:field_name}: ${3:field_value} = ${4:opt_default_value}",
			"\t${5:next_field_name}: ${6:next_field_value} = ${7:next_opt_default_value}",
			"#replies: list[int] = [] # Don't make a field within an immutable class something mutable, like a list. If you do this, every instance of this class will share the same memory for that argument.",
			"#replies: list[int] = field(default_factory=list)# To avoid the above, use the default_factory argument.  This will instantiate separate memory blocks for each instance of this class."
		],
		"description": "Simple dataclass. Declaration as a dataclass automatically writes the __eq__, __init__, and __repr__ functions.  The 'frozen=True' param writes a __hash__ function, and means the class is immutable (read-only after declaration) and can be used, for example, as a dictionary key.  The 'order=True' param writes all of the inequality operator functions (__eq__, __ge__, __gt__, __le__, and __lt__).  Either/both parameters can be safely removed if you don't want their respective functions.\nSee https://youtu.be/vBH6GRJ1REM for more details on proper usage."
	},
	"selen_bot": {
		"prefix": ["selen_bot", "bot"],
		"body": [
			"# Alternate way of solving the 2 merchants problem (faster)",
			"from selenium import webdriver",
			"from lxml import etree",
			"from selenium.webdriver.common.by import By",
			"browser = webdriver.Chrome()",
			"browser.get_element(\"https://techstepacademy.com/trial-of-the-stones\")",
			"# typical find",
			"divs = browser.find(By.XPATH, \"//div/span/..\")",
			"#faster find using lxml to convert page HTML into an element tree.#Following this, the tree is in memory, so parsing will be faster than using raw Selenium manipulations.",
			"tree = etree.HTML(browser.page_source)",
			"merchant_divs = tree.findall(\".//div/span/..\")",
			"first_merchant = merchant_divs[0]",
			"second_merchant = merchant_divs[1]",
			"first_merchant.find(\"./span/b\").text",
			"second_merchant.find(\"./span/b\").text"
		],
		"description": "Walks directory tree, treating dirToWalk as top of tree."
	},
	"function()":{
		"prefix": ["window_pyqt", "pyqt"],
		"body": [			
			"from PyQt5.QtGui import *",
			"from PyQt5.QtWidgets import *",
			"from PyQt5.QtCore import *",
			"",
			"import sys",
			"",
			"# window definition",
			"class MainWindow(QMainWindow):",
			"\tdef __init__(self, *args, **kwargs):",
			"\t\tsuper(MainWindow, self).__init__(*args, **kwargs)",
			"",
			"\t\tself.setWindowTitle(\"Example Title\")",
			"\tpass",
			"",
			"app = QApplication(sys.argv)",
			"",
			"window = MainWindow()",
			"window.show() # Windows are invisible by default.  Requires toggle.",
			"",
			"app.exec_()",
		],
		"description": "A function"
	},
}