{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//main function:
	"main()": {
		"prefix": ["main", "main_snippet"],
		"body": [
			"def main():",
			"\t\"\"\"${1:docstring}\"\"\"",
			"\tprint(\"${2:Hello world?}\")",
			"",
			"if __name__ == \"__main__\":",
			"\tmain()"
		],
		"description": "The main() function"
	},
	"function()":{
		"prefix": ["function", "function_snippet"],
		"body": [
			"def ${1:function_name}(${2:params}):",
			"\"\"\"",
			"${3:docstring}",
			"\"\"\"",
			"\t${4}",
			"#end ${1:function_name}"
		],
		"description": "A function"
	},
	"webdriver_wait": {
		"prefix": ["webdriver_wait"],
		"body": [
			"from selenium.webdriver.support.wait import WebDriverWait",
			"from selenium.webdriver.support import expected_conditions",
			"wait = WebDriverWait(${1:driver}, ${2:int_timeout})",
			"element = wait.until(expected_conditions.element_to_be_clickable((By.${3:type_of_by}, '${4:identifier}')"
		]
	},
	"webdriver_custom_condition": {
		"prefix": ["webdriver_custom_condition"],
		"body": [
			"class $wait_for_condition():",
			"\tdef __init__(self, locator, text:str):",
			"\t\tself.locator = locator",
			"\t\tself.text = text",
			"\tdef __call__(self, driver):",
			"\t\ttry:",
			"\t\t\telement_text = driver.find_element(locator).text",
			"\t\t\treturn element_text.startswith(self.text)",
			"\t\texcept StaleElementReferenceException:",
			"\t\t\treturn False"
		]
	},
	"database_connect":{
		"prefix": ["database_connect", "db_connect"],
		"body": [
			"import mysql.connector",
			"import dotenv",
			"\tdef connect_to_db():",
			"\tdotenv.load_dotenv()",
			"\tHOST = f\"${1:host_connection_address}\"",
			"\tPORT = f\"${2:host_connection_port}\"",
			"\tUSERNAME = os.getenv(\"db_username\")",
			"\tPASSWORD = os.getenv(\"db_password\")",
			"\tDATABASE = \"${3:database_name}\"",
			"\t",
			"\tdb = mysql.connector.connect(",
			"\t\thost=f\"{HOST}\",",
			"\t\tport=f\\\"{PORT}\",",
			"\t\tuser=USERNAME,",
			"\t\tpassword=PASSWORD,",
			"\t\tdatabase=DATABASE",
			"\t)",
			"\treturn db"
		]
	},
	"fileIO":{
		"prefix": ["file_io", "io"],
		"body": [
			"import os",
			"if(os.path.exists(${1:file_path})):",
			"\twith open(${1:file_path}, \"${2:mode}\") as fp:",
			"\t\tcontents = fp.read()",
			"\t\tprint(contents)"
		]
	},
	"dirWalk":{
		"prefix": ["dirWalk, directoryWalk"],
		"body": [
			"import os",
			"for root, dir, files in os.walk(\"${1:dirToWalk}\"):",
			"\tprint root",
			"\tfor items in files:",
			"\t\tprint \"...\" + items",
			"\tprint \"\""
		],
		"description": "Walks directory tree, treating dirToWalk as top of tree."
	},
	"dataClass":{
		"prefix": ["dataClass"],
		"body": [
			"import dataclasses",
			"#from dataclasses import dataclass, field # Alternate import method",
			"@dataclass(frozen=True, order=True)",
			"class ${1:class_name}:",
			"\t${2:field_name}: ${3:field_value} = ${4:opt_default_value}",
			"\t${5:next_field_name}: ${6:next_field_value} = ${7:next_opt_default_value}",
			"#replies: list[int] = [] # Don't make a field within an immutable class something mutable, like a list. If you do this, every instance of this class will share the same memory for that argument.",
			"#replies: list[int] = field(default_factory=list)# To avoid the above, use the default_factory argument.  This will instantiate separate memory blocks for each instance of this class."
		],
		"description": "Simple dataclass. Declaration as a dataclass automatically writes the __eq__, __init__, and __repr__ functions.  The 'frozen=True' param writes a __hash__ function, and means the class is immutable (read-only after declaration) and can be used, for example, as a dictionary key.  The 'order=True' param writes all of the inequality operator functions (__eq__, __ge__, __gt__, __le__, and __lt__).  Either/both parameters can be safely removed if you don't want their respective functions.\nSee https://youtu.be/vBH6GRJ1REM for more details on proper usage."
	},
	"selen_bot": {
		"prefix": ["selen_bot", "bot"],
		"body": [
			"# Alternate way of solving the 2 merchants problem (faster)",
			"",
			"# Extends selenium's webdriver to log page requests and responses",
			"from seleniumwire import webdriver",
			"# Normal selenium imports of helpful namespaces",
			"from selenium.webdriver.common.by import By",
			"from selenium.webdriver.common.keys import Keys",
			"from selenium.webdriver.common.action_chains import ActionChains",
			"from lxml import etree",
			"",
			"browser = webdriver.Chrome()",
			"browser.get(\"https://techstepacademy.com/trial-of-the-stones\")",
			"# typical find",
			"divs = browser.find_element(By.XPATH, \"//div/span/..\")",
			"#faster find using lxml to convert page HTML into an element tree.#Following this, the tree is in memory, so parsing will be faster than using raw Selenium manipulations.",
			"tree = etree.HTML(browser.page_source)",
			"merchant_divs = tree.findall(\".//div/span/..\")",
			"first_merchant = merchant_divs[0]",
			"second_merchant = merchant_divs[1]",
			"print(first_merchant.find(\"./span/b\").text)",
			"print(second_merchant.find(\"./span/b\").text)"
		],
		"description": ""
	},
	"window_pyqt":{
		"prefix": ["window_pyqt", "pyqt"],
		"body": [			
			"from PyQt5.QtGui import *",
			"from PyQt5.QtWidgets import *",
			"from PyQt5.QtCore import *",
			"",
			"import sys",
			"",
			"# window definition",
			"class MainWindow(QMainWindow):",
			"\tdef __init__(self, *args, **kwargs):",
			"\t\tsuper(MainWindow, self).__init__(*args, **kwargs)",
			"",
			"\t\tself.setWindowTitle(\"Example Title\")",
			"\t\tlabel = QLabel(\"widget\")",
        	"\t\tlabel.setAlignment(Qt.AlignCenter)",
        	"\t\tself.setCentralWidget(label)",
			"\tpass",
			"",
			"app = QApplication(sys.argv)",
			"",
			"window = MainWindow()",
			"window.show() # Windows are invisible by default.  Requires toggle.",
			"",
			"app.exec_()",
		],
		"description": "A function"
	},
	"Graphical file select": {
		"prefix": ["gui_file_select", "file_dialog"],
		"body": [
			"import tkinter.filedialog as fileDialog",
			"filepath = fileDialog.askopenfile(filetypes = [",
			"\t('CSV files', ['*.csv']), # allow user to select CSV files",
			"\t('Excel files', ['*.xlsx', '*.xls', '*.xlsm']) # allow user to select variants of Excel files",
			"\t], ",
			"\tinitialdir = file_selection_starting_dir",
			").name # grab the filepath out of the returned filehandler"
		],
		"description": "Log output to console"
	},
	"Inject dependencies": {
		"prefix": ["inject_dependencies", "dependency_injection","main_inject_dependencies"],
		"body": [
			"try:",
			"\t# these imports are mandantory for dependency injection",
			"\timport pip",
			"\timport subprocess",
			"\timport pkg_resources",
			"\timport sys",
			"\t# Import all other libraries below this line",
			"\t",
			"except ImportError:",
			"\tprint(\"Fatal installation error: default libraries not found.  Please ensure that ,Python 3 and pip are installed.\")",
			"",
			"def main():",
			"\tlayout = [[sg.Text('My one-shot window.')],",
			"\t\t\t\t[sg.InputText()],",
			"\t\t\t\t[sg.Submit(), sg.Cancel()]]",
			"",
			"\twindow = sg.Window('Window Title', layout)",
			"",
			"\tevent, values = window.read()",
			"\twindow.close()",
			"",
			"\ttext_input = values[0]",
			"\tsg.popup('You entered', text_input)",
			"",
			"# Main execution thread",
			"# Start by injecting dependencies.",
			"required = {'PySimpleGUI'}",
			"installed = {pkg.key for pkg in pkg_resources.working_set}",
			"missing = required - installed",
			"",
			"if missing:",
			"\tpython = sys.executable",
			"\tsubprocess.check_call([python, '-m', 'pip', 'install', *missing], stdout=subprocess.DEVNULL)",
			"",
			"# Be secure",
			"if __name__ == \"__main__\":",
			"\t# Import your required packages here",
			"\timport PySimpleGUI as sg",
			"\tmain()"
		]
	},
	"Dependency_injection_2": {
		"prefix": ["inject_dependencies_2", "Dependency_injection_2","main_inject_dependencies_2"],
		"body": [
		  "#region Default Imports",
		  "# Check for default dependencies",
		  "try:",
		  "\timport pip # import statement to check if pip is installed",
		  "\timport subprocess # for dependency injection",
		  "\timport pkg_resources # for dependency injection",
		  "\timport sys # for dependency injection",
		  "\t",
		  "except ImportError:",
		  "\tprint(\"Fatal installation error: default libraries not found.  Please ensure that both Python 3 (version 3.11.0 tested) and pip are installed.\")",
		  "",
		  "#endregion",
		  "",
		  "#region Dependency Injection",
		  "# TODO: investigate using the 'freeze' utility to avoid having to do this.",
		  "# Inject non-default dependencies, if they're missing",
		  "required = {",
		  "\t'pysimplegui', # For simple GUI interfaces",
		  "\t'pandas', # For transforming and filtering tabular data",
		  "\t'openpyxl', # Dependency of pandas for reading Excel docs.",
		  "\t'xlsxwriter' # For applying conditional formatting to Excel documents",
		  "}",
		  "installed = {pkg.key for pkg in pkg_resources.working_set}",
		  "missing = required - installed",
		  "",
		  "try:",
		  "\tif len(missing) > 0:",
		  "\t\t# Basic user interaction loop to install required packages.",
		  "\t\twhile True:",
		  "\t\t\tuin = input(f\"You are missing some required libraries in order to run this script: {missing}.\\nWould you like to install them now? (Y/N): \").lower()",
		  "\t\t\tif(uin == \"y\"):",
		  "\t\t\t\tprint(\"Installing missing required libraries, please wait...\")",
		  "\t\t\t\t",
		  "\t\t\t\t# Inject the dependencies",
		  "\t\t\t\tsubprocess.check_call([sys.executable, '-m', 'pip', '--disable-pip-version-check', 'install', *missing], stdout=subprocess.DEVNULL)",
		  "\t\t\t\t",
		  "\t\t\t\tprint(\"Installation process complete\")",
		  "\t\t\t\tbreak # Break out of the loop if the user",
		  "\t\t\telif(uin == \"n\"):",
		  "\t\t\t\tprint(\"Exiting; required packages declined by user...\")",
		  "\t\t\t\ttime.sleep(5) # Pause for 5 seconds to let the user read the message",
		  "\t\t\t\texit(0) # Exit.",
		  "\t\t\telse:",
		  "\t\t\t\tprint(\"Invalid input; please try again.\")",
		  "",
		  "except Exception as e:",
		  "\tif type(e) == subprocess.CalledProcessError: # If user cannot install packages, it will fail for a certain amount of time, then throw a CalledProcessError",
		  "\t\tprint(f\"\\nERROR: Installation of required packages {missing} has failed.  Please ensure you are connected to the Internet.  If you are, check that pip is installed as part of your Python installation.  Press ENTER to acknowledge.\")",
		  "\t\tinput() # Wait for user to press enter to acknowledge the error message",
		  "\t\texit(1)",
		  "",
		  "#endregion",
		  "",
		  "#region Load Injected Dependencies",
		  "# Import injected packages here (default Python libraries are above)",
		  "try:",
		  "\timport PySimpleGUI as sg",
		  "\timport pandas",
		  "",
		  "except ImportError:",
		  "\tprint(\"Fatal import error: external libraries not found.  Please ensure that both Python 3 (version 3.11.0 tested) and pip are installed.\")",
		  "#endregion",
		  "",
		  "def main():",
		  "\tlayout = [[sg.Text('My one-shot window.')],",
		  "\t\t\t\t[sg.InputText()],",
		  "\t\t\t\t[sg.Submit(), sg.Cancel()]]",
		  "",
		  "\twindow = sg.Window('Window Title', layout)",
		  "",
		  "\tevent, values = window.read()",
		  "\twindow.close()",
		  "",
		  "\ttext_input = values[0]",
		  "\tsg.popup('You entered', text_input)",
		  "",
		  "# Be secure, don't let the script run at import-time.  See https://stackoverflow.com/questions/419163/what-does-if-name-main-do.",
		  "if __name__ == \"__main__\":",
		  "\tmain()"
		],
		"description": "Dependency_injection_2"
	},
	"Test_suite": {
		"prefix": "test_suite",
		"body": [
		  "#region Default Imports",
		  "# Check for default dependencies",
		  "try:",
		  "\timport pip # import statement to check if pip is installed",
		  "\timport subprocess # for dependency injection",
		  "\timport pkg_resources # for dependency injection",
		  "\timport sys # for dependency injection",
		  "\timport time # for error-messages",
		  "",
		  "\t# Import the Python file-under-test as a module",
		  "\tsys.path.append(\"./src\")",
		  "\timport bot_driver as driver_under_test",
		  "",
		  "except ImportError:",
		  "\tprint(\"Fatal installation error: default libraries not found.  Please ensure that both Python 3 (version 3.11.0 tested) and pip are installed.\")",
		  "",
		  "#endregion",
		  "",
		  "#region Dependency Injection",
		  "# TODO: investigate using the 'freeze' utility to avoid having to do this.",
		  "# Inject non-default dependencies, if they're missing",
		  "required = {",
		  "\t'pysimplegui', # For simple GUI interfaces",
		  "\t'pytest' # For testing",
		  "}",
		  "installed = {pkg.key for pkg in pkg_resources.working_set}",
		  "missing = required - installed",
		  "",
		  "try:",
		  "\tif len(missing) > 0:",
		  "\t\t# Basic user interaction loop to install required packages.",
		  "\t\twhile True:",
		  "\t\t\tuin = input(f\"You are missing some required libraries in order to run this script: {missing}.\\nWould you like to install them now? (Y/N): \").lower()",
		  "\t\t\tif(uin == \"y\"):",
		  "\t\t\t\tprint(\"Installing missing required libraries, please wait...\")",
		  "\t\t\t\t",
		  "\t\t\t\t# Inject the dependencies",
		  "\t\t\t\tsubprocess.check_call([sys.executable, '-m', 'pip', '--disable-pip-version-check', 'install', *missing], stdout=subprocess.DEVNULL)",
		  "\t\t\t\t",
		  "\t\t\t\tprint(\"Installation process complete\")",
		  "\t\t\t\tbreak # Break out of the loop if the user",
		  "\t\t\telif(uin == \"n\"):",
		  "\t\t\t\tprint(\"Exiting; required packages declined by user...\")",
		  "\t\t\t\ttime.sleep(5) # Pause for 5 seconds to let the user read the message",
		  "\t\t\t\texit(0) # Exit.",
		  "\t\t\telse:",
		  "\t\t\t\tprint(\"Invalid input; please try again.\")",
		  "",
		  "except Exception as e:",
		  "\tif type(e) == subprocess.CalledProcessError: # If user cannot install packages, it will fail for a certain amount of time, then throw a CalledProcessError",
		  "\t\tprint(f\"\\nERROR: Installation of required packages {missing} has failed.  Please ensure you are connected to the Internet.  If you are, check that pip is installed as part of your Python installation.  Press ENTER to acknowledge.\")",
		  "\t\tinput() # Wait for user to press enter to acknowledge the error message",
		  "\t\texit(1)",
		  "",
		  "#endregion",
		  "",
		  "#region Load Injected Dependencies",
		  "# Import injected packages here (default Python libraries are above)",
		  "try:",
		  "\timport PySimpleGUI as sg",
		  "\timport pytest",
		  "",
		  "except ImportError:",
		  "\tprint(\"Fatal import error: external libraries not found.  Please ensure that both Python 3 (version 3.11.0 tested) and pip are installed.\")",
		  "#endregion",
		  "",
		  "#region Test Suite",
		  "# Run using 'pytest' at the top-level, within the CLI",
		  "def test_sample_function_fail():",
		  "\tassert driver_under_test.example_function_under_test() == True",
		  "",
		  "def test_sample_function_pass():",
		  "\tassert driver_under_test.example_function_under_test() == False",
		  "#endregion",
		  "",
		  "# Be secure, don't let the script run at import-time.  See https://stackoverflow.com/questions/419163/what-does-if-name-main-do.",
		  "if __name__ == \"__main__\":",
		  "\tmain()"
		],
		"description": "Test_suite"
	},
	"df_write": {
		"prefix": "df_write",
		"body": [
			"def write_results(dataframe, destination, worksheet_name, method):",
			"\tif(method == \"excel\"):",
			"\t\t# Delete file if it exists.",
			"\t\tif(os.path.exists(destination)):",
			"\t\t\tos.remove(destination)",
			"",
			"\t\t# Write the file",
			"\t\t# apply conditional formatting when writing the document",
			"",
			"\t\t# data.to_excel(destination) # old method",
			"",
			"\t\t# Create a Pandas Excel writer using XlsxWriter as the engine.",
			"\t\twriter = pandas.ExcelWriter(destination, engine='xlsxwriter')",
			"\t\t# Convert the dataframe to an XlsxWriter Excel object.",
			"\t\tdataframe.to_excel(writer, sheet_name=worksheet_name)",
			"",
			"\t\t# Get the xlsxwriter workbook and worksheet objects.",
			"\t\tworkbook  = writer.book",
			"\t\tworksheet = writer.sheets[worksheet_name]",
			"",
			"\t\t# Apply a conditional format to the cell range.",
			"\t\t# Specify formats",
			"",
			"\t\t# Light red fill with dark red text.",
			"\t\tred_format = workbook.add_format({'bg_color':   '#FFC7CE', 'font_color': '#9C0006'})",
			"\t\t# Light yellow fill with dark yellow text.",
			"\t\tyellow_format = workbook.add_format({'bg_color':   '#FFEB9C', 'font_color': '#9C6500'})",
			"\t\t# Green fill with dark green text.",
			"\t\tgreen_format = workbook.add_format({'bg_color':   '#C6EFCE', 'font_color': '#006100'})",
			"",
			"\t\trange_string = str(f'H2:H{dataframe.shape[0] + 1}') # range to apply the conditional formatting to.  Shape[0] member contains ,number of dataframe rows.  Add 1 due to having to skip the header row.  Column H currently contains the comparator results.",
			"",
			"\t\t# Apply formats to desired ranges",
			"\t\tworksheet.conditional_format(range_string, {",
			"\t\t\t'type': 'cell',",
			"\t\t\t'criteria': 'equal to',",
			"\t\t\t'value': 'FALSE',",
			"\t\t\t'format': red_format",
			"\t\t\t}",
			"\t\t)",
			"",
			"\t\tworksheet.conditional_format(range_string, {",
			"\t\t\t'type': 'cell',",
			"\t\t\t'criteria': 'equal to',",
			"\t\t\t'value': 'TRUE',",
			"\t\t\t'format': green_format",
			"\t\t\t}",
			"\t\t)",
			"",
			"\t\t# Close the Pandas Excel writer and output the Excel file.",
			"\t\twriter.close()",
		],
		"description": "Write dataframe to excel format, applying conditional formatting."
	},
	"pytest_skip_decorator": {
		"prefix": ["pytest_skip_decorator"],
		"body": "@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires python3.7 or higher\")"
	}
}