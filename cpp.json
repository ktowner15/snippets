{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	//main function:
	"main()": {
		"prefix": "mainfunction",
		"body": [
			"//File: main.cpp",
			"",
			"#include <iostream>",
			"using namespace std;",
			"",
			"int main(){",
			"",
			"\t${0}",
			"\treturn 0;",
			"}// end main"
		],
		"description": "The main() function"
	},

	// Interface file (.h)
	"Interface file (.h)": {
		"prefix": "hfile",
		"body": [
			"// File: ${1:classname}.h",
			"",
			"#ifndef ${2:constant}_H",
			"#define ${2:consonst}_H",
			"",
			"#include <string>",
			"#include <iostream>",
			"using namespace std;",
			"",
			"class ${1:classname} {",
			"private:",
			"\t$0",
			"public:",
			"\t${1:classname}();",
			"",
			"\tvirtual ~${1:classname}();",
			"",
			"\tvirtual string toString() const;",
			"};",
			"",
			"ostream& operator <<(ostream& os, const ${1:classname}& o);",
			"",
			"#endif"
		],
		"description": "The interface file"
	},

	// Implementation file (.cpp)
	"Implementation file (.cpp)": {
		"prefix": "cfile",
		"body": [
			"// File: ${1:classname}.cpp",
			"",
			"#include \"${1:classname}.h\"",
			"#include <string>",
			"#include <iostream>",
			"#include <sstream>",
			"",
			"using namespace std;",
			"",
			"${1:classname}::${1:classname}() { ${0} }// end ${1:classname}()",
			"",
			"${1:classname}::~${1:classname}() {}// end ~${1:classname}()",
			"",
			"string ${1:classname}::toString() const {",
			"\tostringstream oss;",
			"",
			"\treturn oss.str();",
			"}// end toString()",
			"",
			"ostream& operator <<(ostream& os, const ${1:classname}& o) {",
			"\tos << o.toString();",
			"\treturn os;",
			"}// end <<()"
		],
		"description": "The implementation file"
	}
}